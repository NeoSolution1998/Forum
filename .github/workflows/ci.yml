name: CI Pipeline  # Название для вашего pipeline

on:  # Триггеры для запуска workflow
  push:  # Запускается при push в указанные ветки
    branches:
      - main
      - develop
  pull_request:  # Запускается при создании pull request в указанные ветки
    branches:
      - main
      - develop

jobs:
  test:  # Название работы (job)
    runs-on: ubuntu-latest  # Среда, в которой будет выполняться job (в данном случае Ubuntu)

    services:
      mysql:  # Поднимаем сервис базы данных MySQL
        image: mysql:8.0  # Используем образ MySQL версии 8.0
        env:  # Переменные окружения для настройки базы данных
          MYSQL_ROOT_PASSWORD: root  # Пароль для пользователя root
          MYSQL_DATABASE: testing_db  # Название базы данных для тестов
        options: >-  # Дополнительные опции для контейнера MySQL
          --health-cmd="mysqladmin ping"  
          --health-interval=10s  
          --health-timeout=5s  
          --health-retries=3  
        ports:
          - 3306:3306  # Пробрасываем порт 3306
        volumes:
          - /var/lib/mysql  # Хранение данных базы данных в томе (volume)

    steps:
      - name: Checkout code  # Первый шаг - клонирование (checkout) кода из репозитория
        uses: actions/checkout@v3  # Используем action для клонирования кода

      - name: Set up PHP  # Установка PHP
        uses: shivammathur/setup-php@v2  # Используем action для установки PHP
        with:
          php-version: '8.2'  # Устанавливаем версию PHP 8.2

      - name: Install dependencies  # Установка зависимостей проекта через Composer
        run: |
          composer install --prefer-dist --no-progress --no-suggest  # Устанавливаем зависимости

      - name: Create environment file  # Создание файла .env на основе .env.example
        run: cp .env.example .env  # Копируем .env.example в .env

      - name: Update environment variables for testing  # Настройка переменных окружения для тестов 
        run: |
          php -r "file_put_contents('.env', PHP_EOL.'DB_CONNECTION=mysql'.PHP_EOL, FILE_APPEND);"  
          php -r "file_put_contents('.env', 'DB_HOST=127.0.0.1'.PHP_EOL, FILE_APPEND);" 
          php -r "file_put_contents('.env', 'DB_PORT=3306'.PHP_EOL, FILE_APPEND);" 
          php -r "file_put_contents('.env', 'DB_DATABASE=testing_db'.PHP_EOL, FILE_APPEND);"  
          php -r "file_put_contents('.env', 'DB_USERNAME=root'.PHP_EOL, FILE_APPEND);"  
          php -r "file_put_contents('.env', 'DB_PASSWORD=root'.PHP_EOL, FILE_APPEND);"  

      - name: Generate app key  # Генерация ключа приложения Laravel 
        run: php artisan key:generate  # Генерируем ключ для шифрования

      - name: Run migrations  # Запуск миграций для настройки базы данных
        run: php artisan migrate --force  # Применяем миграции с параметром --force для обхода запросов на подтверждение

      - name: Run tests  # Запуск тестов
        run: php artisan test  # Запускаем тесты с помощью artisan команды

      - name: Upload test results  # Загрузка результатов тестов как артефакта
        if: always()  # Всегда выполняем этот шаг, даже если предыдущие шаги завершились с ошибкой
        uses: actions/upload-artifact@v3  # Используем action для загрузки артефактов
        with:
          name: test-results  # Имя для артефакта
          path: storage/logs/laravel.log  # Путь к файлу логов, который будет загружен
